[{"C:\\Users\\Admin\\dev\\fun\\projects\\minesweeper\\src\\App.js":"1","C:\\Users\\Admin\\dev\\fun\\projects\\minesweeper\\src\\components\\Cell.jsx":"2","C:\\Users\\Admin\\dev\\fun\\projects\\minesweeper\\src\\index.js":"3","C:\\Users\\Admin\\dev\\fun\\projects\\minesweeper\\src\\components\\Bomb.jsx":"4","C:\\Users\\Admin\\dev\\fun\\projects\\minesweeper\\src\\components\\Flag.jsx":"5","C:\\Users\\Admin\\dev\\fun\\projects\\minesweeper\\src\\components\\Grid.jsx":"6","C:\\Users\\Admin\\dev\\fun\\projects\\minesweeper\\src\\controller\\Minesweeper.js":"7","C:\\Users\\Admin\\dev\\fun\\projects\\minesweeper\\src\\components\\DisplayActionPanel.jsx":"8","C:\\Users\\Admin\\dev\\fun\\projects\\minesweeper\\src\\components\\GridItem.jsx":"9","C:\\Users\\Admin\\dev\\fun\\projects\\minesweeper\\src\\components\\GameBoard.jsx":"10","C:\\Users\\Admin\\dev\\fun\\projects\\minesweeper\\src\\components\\Game.jsx":"11"},{"size":137,"mtime":1608654423711,"results":"12","hashOfConfig":"13"},{"size":1691,"mtime":1606411927736,"results":"14","hashOfConfig":"13"},{"size":228,"mtime":1608654423728,"results":"15","hashOfConfig":"13"},{"size":2408,"mtime":1608654423714,"results":"16","hashOfConfig":"13"},{"size":673,"mtime":1606413676500,"results":"17","hashOfConfig":"13"},{"size":243,"mtime":1608654423721,"results":"18","hashOfConfig":"13"},{"size":7966,"mtime":1608654423726,"results":"19","hashOfConfig":"13"},{"size":573,"mtime":1608654574068,"results":"20","hashOfConfig":"13"},{"size":664,"mtime":1608654423724,"results":"21","hashOfConfig":"13"},{"size":2397,"mtime":1608653953923,"results":"22","hashOfConfig":"13"},{"size":668,"mtime":1606415330390,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"43upkj",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Admin\\dev\\fun\\projects\\minesweeper\\src\\App.js",[],"C:\\Users\\Admin\\dev\\fun\\projects\\minesweeper\\src\\components\\Cell.jsx",[],"C:\\Users\\Admin\\dev\\fun\\projects\\minesweeper\\src\\index.js",[],"C:\\Users\\Admin\\dev\\fun\\projects\\minesweeper\\src\\components\\Bomb.jsx",[],"C:\\Users\\Admin\\dev\\fun\\projects\\minesweeper\\src\\components\\Flag.jsx",[],"C:\\Users\\Admin\\dev\\fun\\projects\\minesweeper\\src\\components\\Grid.jsx",[],"C:\\Users\\Admin\\dev\\fun\\projects\\minesweeper\\src\\controller\\Minesweeper.js",["48"],"/**\r\n * Returns a random number between min (inclusive) and max (exclusive)\r\n */\r\nfunction getRandomArbitrary(min, max) {\r\n    return Math.random() * (max - min) + min;\r\n}\r\n\r\n/**\r\n * Returns a random integer between min (inclusive) and max (inclusive).\r\n * The value is no lower than min (or the next integer greater than min\r\n * if min isn't an integer) and no greater than max (or the next integer\r\n * lower than max if max isn't an integer).\r\n * Using Math.round() will give you a non-uniform distribution!\r\n */\r\nfunction getRandomInt(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nexport class Cell {\r\n    constructor({ number = 0, mine = false } = {}) {\r\n        this._flagged = false;\r\n        this._mine = false;\r\n        this._isOpen = false;\r\n\r\n        if (number < 0 || number > 8)\r\n            throw new Error(`Out Of Range: Number (${number}) should be in the 1 - 8 for Cell Object`)\r\n\r\n        if (!mine)\r\n            this._number = number;\r\n        else\r\n            this._mine = true;\r\n    }\r\n\r\n    get number() {\r\n        return this._number;\r\n    }\r\n\r\n    get isMined() {\r\n        return this._mine;\r\n    }\r\n\r\n    get isFlagged() {\r\n        return this._flagged;\r\n    }\r\n\r\n    get isOpen() {\r\n        return this._isOpen;\r\n    }\r\n\r\n    toggleFlag() {\r\n        this._flagged = !this._flagged;\r\n    }\r\n\r\n    open() {\r\n        this._isOpen = true;\r\n    }\r\n\r\n    toString() {\r\n        return `[Cell ${this._mine ? 'mined' : this._number}${this._flagged ? ' Flagged' : ''}]`;\r\n    }\r\n}\r\n\r\nfunction throwDimensionError(d, value) {\r\n    throw new Error(`Out of Range: ${d}(${value}) should be above 0`);\r\n}\r\n\r\nfunction getValuesAround(ary = [[]], x = 0, y = 0) {\r\n    let retVal = [];\r\n\r\n    const isValidIndex = ({ x = 0, y = 0 }) => x >= 0 && y >= 0 && x < ary.length && y < ary[0].length;\r\n\r\n    if (isValidIndex({ x: x - 1 }))\r\n        retVal.push(ary[x - 1][y]);\r\n    if (isValidIndex({ y: y - 1 }))\r\n        retVal.push(ary[x][y - 1]);\r\n    if (isValidIndex({ x: x - 1, y: y - 1 }))\r\n        retVal.push(ary[x - 1][y - 1]);\r\n    if (isValidIndex({ x: x + 1, y: y + 1 }))\r\n        retVal.push(ary[x + 1][y + 1]);\r\n    if (isValidIndex({ x: x + 1 }))\r\n        retVal.push(ary[x + 1][y]);\r\n    if (isValidIndex({ y: y + 1 }))\r\n        retVal.push(ary[x][y + 1]);\r\n    if (isValidIndex({ x: x + 1, y: y - 1 }))\r\n        retVal.push(ary[x + 1][y - 1]);\r\n    if (isValidIndex({ x: x - 1, y: y + 1 }))\r\n        retVal.push(ary[x - 1][y + 1]);\r\n\r\n    return retVal;\r\n}\r\n\r\nexport const MAX_SEED_RANGE = 10000000;\r\nexport const DEFAULT_MINE_COUNT = 10;\r\nexport const DEFAULT_HEIGHT = 10;\r\nexport const DEFAULT_WIDTH = 10;\r\n\r\nexport class Minesweeper {\r\n    constructor(width = DEFAULT_WIDTH, height = DEFAULT_HEIGHT, mineCount = DEFAULT_MINE_COUNT) {\r\n        this._flagCount = 0;\r\n        this._mineCount = mineCount;\r\n        this._width = width;\r\n        this._height = height;\r\n\r\n        this._startTime = Date.now();\r\n        this._isRunning = true;\r\n        this._timeTake = 0;\r\n\r\n        this._gameActive = true;\r\n        this._won = false;\r\n\r\n        if (width < 1)\r\n            throwDimensionError('width', width);\r\n\r\n        if (height < 1)\r\n            throwDimensionError('height', height);\r\n\r\n        if (mineCount >= width * height)\r\n            throw new Error(\"Mine count should be greater than the cell count!\");\r\n\r\n        this._array = new Array(width).fill(null).map(() => new Array(height).fill(new Cell()));\r\n\r\n        for (let i = 0; i < mineCount; i++) {\r\n            let randWidth = getRandomInt(0, width - 1);\r\n            let randHeight = getRandomInt(0, height - 1);\r\n\r\n            if (this._array[randWidth][randHeight].isMined)\r\n                i--;\r\n            else\r\n                this._array[randWidth][randHeight] = new Cell({ mine: true });\r\n        }\r\n\r\n        for (let x = 0; x < this._array.length; x++)\r\n            for (let y = 0; y < this._array[0].length; y++) {\r\n                let vals = getValuesAround(this._array, x, y);\r\n\r\n                let mines = 0;\r\n                vals.forEach(cell => {\r\n                    if (cell.isMined)\r\n                        mines++;\r\n                });\r\n\r\n                if (!this._array[x][y].isMined) {\r\n                    this._array[x][y] = new Cell({ number: mines });\r\n                }\r\n            }\r\n    }\r\n\r\n    get seed() {\r\n        return this._seed;\r\n    }\r\n\r\n    get grid() {\r\n        return this._array.flat();\r\n    }\r\n\r\n    get isActive() {\r\n        return this._gameActive;\r\n    }\r\n\r\n    get isWin() {\r\n        return this._won;\r\n    }\r\n\r\n    get mineCount() {\r\n        return this._mineCount;\r\n    }\r\n\r\n    get width() {\r\n        return this._width;\r\n    }\r\n\r\n    get height() {\r\n        return this._height;\r\n    }\r\n\r\n    get flagCount() {\r\n        return this._flagCount;\r\n    }\r\n\r\n    get time() {\r\n        return this._timeTake + (this._isRunning ? Date.now() - this._startTime : 0);\r\n    }\r\n\r\n    get isTimerRunning() {\r\n        return this._isRunning;\r\n    }\r\n\r\n    _stopTimer() {\r\n        this._isRunning = false;\r\n        this._timeTake += Date.now() - this._startTime;\r\n    }\r\n\r\n    _startTimer() {\r\n        this._isRunning = true;\r\n        this._startTime = Date.now();\r\n    }\r\n\r\n    toggleTimer() {\r\n        if (this._isRunning && this._gameActive)\r\n            this._stopTimer();\r\n        else if (this._gameActive)\r\n            this._startTimer();\r\n    }\r\n\r\n    toggleFlag(x, y) {\r\n        if (!this._array[x][y].isFlagged && this._flagCount < this._mineCount) {\r\n            this._array[x][y].toggleFlag();\r\n            this._flagCount++;\r\n\r\n            if (this._flagCount === this._mineCount && this.allFlagged()) {\r\n                this._won = true;\r\n                this._gameActive = false;\r\n                this._stopTimer();\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        } else if (this._array[x][y].isFlagged) {\r\n            this._array[x][y].toggleFlag();\r\n            this._flagCount--;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    allFlagged() {\r\n        if (this._flagCount === this._mineCount) {\r\n            for (let x = 0; x < this._array.length; x++)\r\n                for (let y = 0; y < this._array[0].length; y++)\r\n                    if (this._array[x][y].isFlagged && !this._array[x][y].isMined)\r\n                        return false;\r\n\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    open(x, y) {\r\n        if (this._gameActive) {\r\n            let cell = this._array[x][y];\r\n\r\n            if (cell.isOpen || cell.isFlagged)\r\n                return false;\r\n\r\n            if (cell.isMined) {\r\n                cell.open();\r\n                this._gameActive = false;\r\n                this._stopTimer();\r\n                return false;\r\n            }\r\n\r\n            cell.open();\r\n\r\n            if (cell.number === 0) {\r\n                const isValidIndex = ({ xC = x, yC = y }) => xC >= 0 && yC >= 0 && xC < this._array.length && yC < this._array[0].length;\r\n\r\n                if (isValidIndex({ xC: x - 1 }))\r\n                    this.open(x - 1, y);\r\n                if (isValidIndex({ yC: y - 1 }))\r\n                    this.open(x, y - 1);\r\n                if (isValidIndex({ xC: x - 1, yC: y - 1 }))\r\n                    this.open(x - 1, y - 1);\r\n                if (isValidIndex({ xC: x + 1, yC: y + 1 }))\r\n                    this.open(x + 1, y + 1);\r\n                if (isValidIndex({ xC: x + 1 }))\r\n                    this.open(x + 1, y);\r\n                if (isValidIndex({ yC: y + 1 }))\r\n                    this.open(x, y + 1);\r\n                if (isValidIndex({ xC: x + 1, yC: y - 1 }))\r\n                    this.open(x + 1, y - 1);\r\n                if (isValidIndex({ xC: x - 1, yC: y + 1 }))\r\n                    this.open(x - 1, y + 1);\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}",["49","50"],"C:\\Users\\Admin\\dev\\fun\\projects\\minesweeper\\src\\components\\DisplayActionPanel.jsx",[],"C:\\Users\\Admin\\dev\\fun\\projects\\minesweeper\\src\\components\\GridItem.jsx",[],"C:\\Users\\Admin\\dev\\fun\\projects\\minesweeper\\src\\components\\GameBoard.jsx",[],"C:\\Users\\Admin\\dev\\fun\\projects\\minesweeper\\src\\components\\Game.jsx",[],{"ruleId":"51","severity":1,"message":"52","line":4,"column":10,"nodeType":"53","messageId":"54","endLine":4,"endColumn":28},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},"no-unused-vars","'getRandomArbitrary' is defined but never used.","Identifier","unusedVar","no-native-reassign",["59"],"no-negated-in-lhs",["60"],"no-global-assign","no-unsafe-negation"]